// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: args.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_args_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_args_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_args_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_args_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_args_2eproto;
namespace cherry {
class KvCommnad;
struct KvCommnadDefaultTypeInternal;
extern KvCommnadDefaultTypeInternal _KvCommnad_default_instance_;
class LogEntry;
struct LogEntryDefaultTypeInternal;
extern LogEntryDefaultTypeInternal _LogEntry_default_instance_;
class RequestAppendArgs;
struct RequestAppendArgsDefaultTypeInternal;
extern RequestAppendArgsDefaultTypeInternal _RequestAppendArgs_default_instance_;
class RequestAppendReply;
struct RequestAppendReplyDefaultTypeInternal;
extern RequestAppendReplyDefaultTypeInternal _RequestAppendReply_default_instance_;
class RequestVoteArgs;
struct RequestVoteArgsDefaultTypeInternal;
extern RequestVoteArgsDefaultTypeInternal _RequestVoteArgs_default_instance_;
class RequestVoteReply;
struct RequestVoteReplyDefaultTypeInternal;
extern RequestVoteReplyDefaultTypeInternal _RequestVoteReply_default_instance_;
}  // namespace cherry
PROTOBUF_NAMESPACE_OPEN
template<> ::cherry::KvCommnad* Arena::CreateMaybeMessage<::cherry::KvCommnad>(Arena*);
template<> ::cherry::LogEntry* Arena::CreateMaybeMessage<::cherry::LogEntry>(Arena*);
template<> ::cherry::RequestAppendArgs* Arena::CreateMaybeMessage<::cherry::RequestAppendArgs>(Arena*);
template<> ::cherry::RequestAppendReply* Arena::CreateMaybeMessage<::cherry::RequestAppendReply>(Arena*);
template<> ::cherry::RequestVoteArgs* Arena::CreateMaybeMessage<::cherry::RequestVoteArgs>(Arena*);
template<> ::cherry::RequestVoteReply* Arena::CreateMaybeMessage<::cherry::RequestVoteReply>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace cherry {

// ===================================================================

class RequestVoteArgs final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cherry.RequestVoteArgs) */ {
 public:
  inline RequestVoteArgs() : RequestVoteArgs(nullptr) {}
  ~RequestVoteArgs() override;
  explicit constexpr RequestVoteArgs(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestVoteArgs(const RequestVoteArgs& from);
  RequestVoteArgs(RequestVoteArgs&& from) noexcept
    : RequestVoteArgs() {
    *this = ::std::move(from);
  }

  inline RequestVoteArgs& operator=(const RequestVoteArgs& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestVoteArgs& operator=(RequestVoteArgs&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestVoteArgs& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestVoteArgs* internal_default_instance() {
    return reinterpret_cast<const RequestVoteArgs*>(
               &_RequestVoteArgs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RequestVoteArgs& a, RequestVoteArgs& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestVoteArgs* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestVoteArgs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestVoteArgs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestVoteArgs>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RequestVoteArgs& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RequestVoteArgs& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestVoteArgs* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cherry.RequestVoteArgs";
  }
  protected:
  explicit RequestVoteArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTermFieldNumber = 1,
    kCandidateIdFieldNumber = 2,
    kLastLogIndexFieldNumber = 3,
    kLastLogTermFieldNumber = 4,
  };
  // required uint32 term = 1;
  bool has_term() const;
  private:
  bool _internal_has_term() const;
  public:
  void clear_term();
  uint32_t term() const;
  void set_term(uint32_t value);
  private:
  uint32_t _internal_term() const;
  void _internal_set_term(uint32_t value);
  public:

  // required int32 candidate_id = 2;
  bool has_candidate_id() const;
  private:
  bool _internal_has_candidate_id() const;
  public:
  void clear_candidate_id();
  int32_t candidate_id() const;
  void set_candidate_id(int32_t value);
  private:
  int32_t _internal_candidate_id() const;
  void _internal_set_candidate_id(int32_t value);
  public:

  // required uint32 last_log_index = 3;
  bool has_last_log_index() const;
  private:
  bool _internal_has_last_log_index() const;
  public:
  void clear_last_log_index();
  uint32_t last_log_index() const;
  void set_last_log_index(uint32_t value);
  private:
  uint32_t _internal_last_log_index() const;
  void _internal_set_last_log_index(uint32_t value);
  public:

  // required uint32 last_log_term = 4;
  bool has_last_log_term() const;
  private:
  bool _internal_has_last_log_term() const;
  public:
  void clear_last_log_term();
  uint32_t last_log_term() const;
  void set_last_log_term(uint32_t value);
  private:
  uint32_t _internal_last_log_term() const;
  void _internal_set_last_log_term(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cherry.RequestVoteArgs)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t term_;
  int32_t candidate_id_;
  uint32_t last_log_index_;
  uint32_t last_log_term_;
  friend struct ::TableStruct_args_2eproto;
};
// -------------------------------------------------------------------

class RequestVoteReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cherry.RequestVoteReply) */ {
 public:
  inline RequestVoteReply() : RequestVoteReply(nullptr) {}
  ~RequestVoteReply() override;
  explicit constexpr RequestVoteReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestVoteReply(const RequestVoteReply& from);
  RequestVoteReply(RequestVoteReply&& from) noexcept
    : RequestVoteReply() {
    *this = ::std::move(from);
  }

  inline RequestVoteReply& operator=(const RequestVoteReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestVoteReply& operator=(RequestVoteReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestVoteReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestVoteReply* internal_default_instance() {
    return reinterpret_cast<const RequestVoteReply*>(
               &_RequestVoteReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RequestVoteReply& a, RequestVoteReply& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestVoteReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestVoteReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestVoteReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestVoteReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RequestVoteReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RequestVoteReply& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestVoteReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cherry.RequestVoteReply";
  }
  protected:
  explicit RequestVoteReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTermFieldNumber = 1,
    kVoteGrantedFieldNumber = 2,
  };
  // required uint32 term = 1;
  bool has_term() const;
  private:
  bool _internal_has_term() const;
  public:
  void clear_term();
  uint32_t term() const;
  void set_term(uint32_t value);
  private:
  uint32_t _internal_term() const;
  void _internal_set_term(uint32_t value);
  public:

  // required bool vote_granted = 2;
  bool has_vote_granted() const;
  private:
  bool _internal_has_vote_granted() const;
  public:
  void clear_vote_granted();
  bool vote_granted() const;
  void set_vote_granted(bool value);
  private:
  bool _internal_vote_granted() const;
  void _internal_set_vote_granted(bool value);
  public:

  // @@protoc_insertion_point(class_scope:cherry.RequestVoteReply)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t term_;
  bool vote_granted_;
  friend struct ::TableStruct_args_2eproto;
};
// -------------------------------------------------------------------

class LogEntry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cherry.LogEntry) */ {
 public:
  inline LogEntry() : LogEntry(nullptr) {}
  ~LogEntry() override;
  explicit constexpr LogEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LogEntry(const LogEntry& from);
  LogEntry(LogEntry&& from) noexcept
    : LogEntry() {
    *this = ::std::move(from);
  }

  inline LogEntry& operator=(const LogEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogEntry& operator=(LogEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LogEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogEntry* internal_default_instance() {
    return reinterpret_cast<const LogEntry*>(
               &_LogEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LogEntry& a, LogEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(LogEntry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LogEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LogEntry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LogEntry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LogEntry& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogEntry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cherry.LogEntry";
  }
  protected:
  explicit LogEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 3,
    kTermFieldNumber = 1,
    kIndexFieldNumber = 2,
  };
  // required bytes command = 3;
  bool has_command() const;
  private:
  bool _internal_has_command() const;
  public:
  void clear_command();
  const std::string& command() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_command(ArgT0&& arg0, ArgT... args);
  std::string* mutable_command();
  PROTOBUF_NODISCARD std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // required uint32 term = 1;
  bool has_term() const;
  private:
  bool _internal_has_term() const;
  public:
  void clear_term();
  uint32_t term() const;
  void set_term(uint32_t value);
  private:
  uint32_t _internal_term() const;
  void _internal_set_term(uint32_t value);
  public:

  // required uint32 index = 2;
  bool has_index() const;
  private:
  bool _internal_has_index() const;
  public:
  void clear_index();
  uint32_t index() const;
  void set_index(uint32_t value);
  private:
  uint32_t _internal_index() const;
  void _internal_set_index(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cherry.LogEntry)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  uint32_t term_;
  uint32_t index_;
  friend struct ::TableStruct_args_2eproto;
};
// -------------------------------------------------------------------

class RequestAppendArgs final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cherry.RequestAppendArgs) */ {
 public:
  inline RequestAppendArgs() : RequestAppendArgs(nullptr) {}
  ~RequestAppendArgs() override;
  explicit constexpr RequestAppendArgs(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestAppendArgs(const RequestAppendArgs& from);
  RequestAppendArgs(RequestAppendArgs&& from) noexcept
    : RequestAppendArgs() {
    *this = ::std::move(from);
  }

  inline RequestAppendArgs& operator=(const RequestAppendArgs& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestAppendArgs& operator=(RequestAppendArgs&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestAppendArgs& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestAppendArgs* internal_default_instance() {
    return reinterpret_cast<const RequestAppendArgs*>(
               &_RequestAppendArgs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RequestAppendArgs& a, RequestAppendArgs& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestAppendArgs* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestAppendArgs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestAppendArgs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestAppendArgs>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RequestAppendArgs& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RequestAppendArgs& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestAppendArgs* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cherry.RequestAppendArgs";
  }
  protected:
  explicit RequestAppendArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 6,
    kTermFieldNumber = 1,
    kLeaderIdFieldNumber = 2,
    kPreLogIndexFieldNumber = 3,
    kPreLogTermFieldNumber = 4,
    kLeaderCommitFieldNumber = 5,
  };
  // repeated .cherry.LogEntry entries = 6;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  ::cherry::LogEntry* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cherry::LogEntry >*
      mutable_entries();
  private:
  const ::cherry::LogEntry& _internal_entries(int index) const;
  ::cherry::LogEntry* _internal_add_entries();
  public:
  const ::cherry::LogEntry& entries(int index) const;
  ::cherry::LogEntry* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cherry::LogEntry >&
      entries() const;

  // required uint32 term = 1;
  bool has_term() const;
  private:
  bool _internal_has_term() const;
  public:
  void clear_term();
  uint32_t term() const;
  void set_term(uint32_t value);
  private:
  uint32_t _internal_term() const;
  void _internal_set_term(uint32_t value);
  public:

  // required int32 leader_id = 2;
  bool has_leader_id() const;
  private:
  bool _internal_has_leader_id() const;
  public:
  void clear_leader_id();
  int32_t leader_id() const;
  void set_leader_id(int32_t value);
  private:
  int32_t _internal_leader_id() const;
  void _internal_set_leader_id(int32_t value);
  public:

  // required uint32 pre_log_index = 3;
  bool has_pre_log_index() const;
  private:
  bool _internal_has_pre_log_index() const;
  public:
  void clear_pre_log_index();
  uint32_t pre_log_index() const;
  void set_pre_log_index(uint32_t value);
  private:
  uint32_t _internal_pre_log_index() const;
  void _internal_set_pre_log_index(uint32_t value);
  public:

  // required uint32 pre_log_term = 4;
  bool has_pre_log_term() const;
  private:
  bool _internal_has_pre_log_term() const;
  public:
  void clear_pre_log_term();
  uint32_t pre_log_term() const;
  void set_pre_log_term(uint32_t value);
  private:
  uint32_t _internal_pre_log_term() const;
  void _internal_set_pre_log_term(uint32_t value);
  public:

  // required uint32 leader_commit = 5;
  bool has_leader_commit() const;
  private:
  bool _internal_has_leader_commit() const;
  public:
  void clear_leader_commit();
  uint32_t leader_commit() const;
  void set_leader_commit(uint32_t value);
  private:
  uint32_t _internal_leader_commit() const;
  void _internal_set_leader_commit(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cherry.RequestAppendArgs)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cherry::LogEntry > entries_;
  uint32_t term_;
  int32_t leader_id_;
  uint32_t pre_log_index_;
  uint32_t pre_log_term_;
  uint32_t leader_commit_;
  friend struct ::TableStruct_args_2eproto;
};
// -------------------------------------------------------------------

class RequestAppendReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cherry.RequestAppendReply) */ {
 public:
  inline RequestAppendReply() : RequestAppendReply(nullptr) {}
  ~RequestAppendReply() override;
  explicit constexpr RequestAppendReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestAppendReply(const RequestAppendReply& from);
  RequestAppendReply(RequestAppendReply&& from) noexcept
    : RequestAppendReply() {
    *this = ::std::move(from);
  }

  inline RequestAppendReply& operator=(const RequestAppendReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestAppendReply& operator=(RequestAppendReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestAppendReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestAppendReply* internal_default_instance() {
    return reinterpret_cast<const RequestAppendReply*>(
               &_RequestAppendReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RequestAppendReply& a, RequestAppendReply& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestAppendReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestAppendReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestAppendReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestAppendReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RequestAppendReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RequestAppendReply& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestAppendReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cherry.RequestAppendReply";
  }
  protected:
  explicit RequestAppendReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTermFieldNumber = 1,
    kSuccessFieldNumber = 2,
  };
  // required uint32 term = 1;
  bool has_term() const;
  private:
  bool _internal_has_term() const;
  public:
  void clear_term();
  uint32_t term() const;
  void set_term(uint32_t value);
  private:
  uint32_t _internal_term() const;
  void _internal_set_term(uint32_t value);
  public:

  // required bool success = 2;
  bool has_success() const;
  private:
  bool _internal_has_success() const;
  public:
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:cherry.RequestAppendReply)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t term_;
  bool success_;
  friend struct ::TableStruct_args_2eproto;
};
// -------------------------------------------------------------------

class KvCommnad final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cherry.KvCommnad) */ {
 public:
  inline KvCommnad() : KvCommnad(nullptr) {}
  ~KvCommnad() override;
  explicit constexpr KvCommnad(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KvCommnad(const KvCommnad& from);
  KvCommnad(KvCommnad&& from) noexcept
    : KvCommnad() {
    *this = ::std::move(from);
  }

  inline KvCommnad& operator=(const KvCommnad& from) {
    CopyFrom(from);
    return *this;
  }
  inline KvCommnad& operator=(KvCommnad&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KvCommnad& default_instance() {
    return *internal_default_instance();
  }
  static inline const KvCommnad* internal_default_instance() {
    return reinterpret_cast<const KvCommnad*>(
               &_KvCommnad_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(KvCommnad& a, KvCommnad& b) {
    a.Swap(&b);
  }
  inline void Swap(KvCommnad* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KvCommnad* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KvCommnad* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KvCommnad>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KvCommnad& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const KvCommnad& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KvCommnad* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cherry.KvCommnad";
  }
  protected:
  explicit KvCommnad(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOperationFieldNumber = 1,
    kKeyFieldNumber = 2,
    kValueFieldNumber = 3,
    kCidFieldNumber = 4,
    kSeqFieldNumber = 5,
  };
  // required string operation = 1;
  bool has_operation() const;
  private:
  bool _internal_has_operation() const;
  public:
  void clear_operation();
  const std::string& operation() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_operation(ArgT0&& arg0, ArgT... args);
  std::string* mutable_operation();
  PROTOBUF_NODISCARD std::string* release_operation();
  void set_allocated_operation(std::string* operation);
  private:
  const std::string& _internal_operation() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_operation(const std::string& value);
  std::string* _internal_mutable_operation();
  public:

  // required string key = 2;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // required string value = 3;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // required int64 cid = 4;
  bool has_cid() const;
  private:
  bool _internal_has_cid() const;
  public:
  void clear_cid();
  int64_t cid() const;
  void set_cid(int64_t value);
  private:
  int64_t _internal_cid() const;
  void _internal_set_cid(int64_t value);
  public:

  // required uint32 seq = 5;
  bool has_seq() const;
  private:
  bool _internal_has_seq() const;
  public:
  void clear_seq();
  uint32_t seq() const;
  void set_seq(uint32_t value);
  private:
  uint32_t _internal_seq() const;
  void _internal_set_seq(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cherry.KvCommnad)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr operation_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  int64_t cid_;
  uint32_t seq_;
  friend struct ::TableStruct_args_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RequestVoteArgs

// required uint32 term = 1;
inline bool RequestVoteArgs::_internal_has_term() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RequestVoteArgs::has_term() const {
  return _internal_has_term();
}
inline void RequestVoteArgs::clear_term() {
  term_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t RequestVoteArgs::_internal_term() const {
  return term_;
}
inline uint32_t RequestVoteArgs::term() const {
  // @@protoc_insertion_point(field_get:cherry.RequestVoteArgs.term)
  return _internal_term();
}
inline void RequestVoteArgs::_internal_set_term(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  term_ = value;
}
inline void RequestVoteArgs::set_term(uint32_t value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:cherry.RequestVoteArgs.term)
}

// required int32 candidate_id = 2;
inline bool RequestVoteArgs::_internal_has_candidate_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RequestVoteArgs::has_candidate_id() const {
  return _internal_has_candidate_id();
}
inline void RequestVoteArgs::clear_candidate_id() {
  candidate_id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t RequestVoteArgs::_internal_candidate_id() const {
  return candidate_id_;
}
inline int32_t RequestVoteArgs::candidate_id() const {
  // @@protoc_insertion_point(field_get:cherry.RequestVoteArgs.candidate_id)
  return _internal_candidate_id();
}
inline void RequestVoteArgs::_internal_set_candidate_id(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  candidate_id_ = value;
}
inline void RequestVoteArgs::set_candidate_id(int32_t value) {
  _internal_set_candidate_id(value);
  // @@protoc_insertion_point(field_set:cherry.RequestVoteArgs.candidate_id)
}

// required uint32 last_log_index = 3;
inline bool RequestVoteArgs::_internal_has_last_log_index() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RequestVoteArgs::has_last_log_index() const {
  return _internal_has_last_log_index();
}
inline void RequestVoteArgs::clear_last_log_index() {
  last_log_index_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t RequestVoteArgs::_internal_last_log_index() const {
  return last_log_index_;
}
inline uint32_t RequestVoteArgs::last_log_index() const {
  // @@protoc_insertion_point(field_get:cherry.RequestVoteArgs.last_log_index)
  return _internal_last_log_index();
}
inline void RequestVoteArgs::_internal_set_last_log_index(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  last_log_index_ = value;
}
inline void RequestVoteArgs::set_last_log_index(uint32_t value) {
  _internal_set_last_log_index(value);
  // @@protoc_insertion_point(field_set:cherry.RequestVoteArgs.last_log_index)
}

// required uint32 last_log_term = 4;
inline bool RequestVoteArgs::_internal_has_last_log_term() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RequestVoteArgs::has_last_log_term() const {
  return _internal_has_last_log_term();
}
inline void RequestVoteArgs::clear_last_log_term() {
  last_log_term_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t RequestVoteArgs::_internal_last_log_term() const {
  return last_log_term_;
}
inline uint32_t RequestVoteArgs::last_log_term() const {
  // @@protoc_insertion_point(field_get:cherry.RequestVoteArgs.last_log_term)
  return _internal_last_log_term();
}
inline void RequestVoteArgs::_internal_set_last_log_term(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  last_log_term_ = value;
}
inline void RequestVoteArgs::set_last_log_term(uint32_t value) {
  _internal_set_last_log_term(value);
  // @@protoc_insertion_point(field_set:cherry.RequestVoteArgs.last_log_term)
}

// -------------------------------------------------------------------

// RequestVoteReply

// required uint32 term = 1;
inline bool RequestVoteReply::_internal_has_term() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RequestVoteReply::has_term() const {
  return _internal_has_term();
}
inline void RequestVoteReply::clear_term() {
  term_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t RequestVoteReply::_internal_term() const {
  return term_;
}
inline uint32_t RequestVoteReply::term() const {
  // @@protoc_insertion_point(field_get:cherry.RequestVoteReply.term)
  return _internal_term();
}
inline void RequestVoteReply::_internal_set_term(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  term_ = value;
}
inline void RequestVoteReply::set_term(uint32_t value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:cherry.RequestVoteReply.term)
}

// required bool vote_granted = 2;
inline bool RequestVoteReply::_internal_has_vote_granted() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RequestVoteReply::has_vote_granted() const {
  return _internal_has_vote_granted();
}
inline void RequestVoteReply::clear_vote_granted() {
  vote_granted_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool RequestVoteReply::_internal_vote_granted() const {
  return vote_granted_;
}
inline bool RequestVoteReply::vote_granted() const {
  // @@protoc_insertion_point(field_get:cherry.RequestVoteReply.vote_granted)
  return _internal_vote_granted();
}
inline void RequestVoteReply::_internal_set_vote_granted(bool value) {
  _has_bits_[0] |= 0x00000002u;
  vote_granted_ = value;
}
inline void RequestVoteReply::set_vote_granted(bool value) {
  _internal_set_vote_granted(value);
  // @@protoc_insertion_point(field_set:cherry.RequestVoteReply.vote_granted)
}

// -------------------------------------------------------------------

// LogEntry

// required uint32 term = 1;
inline bool LogEntry::_internal_has_term() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LogEntry::has_term() const {
  return _internal_has_term();
}
inline void LogEntry::clear_term() {
  term_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t LogEntry::_internal_term() const {
  return term_;
}
inline uint32_t LogEntry::term() const {
  // @@protoc_insertion_point(field_get:cherry.LogEntry.term)
  return _internal_term();
}
inline void LogEntry::_internal_set_term(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  term_ = value;
}
inline void LogEntry::set_term(uint32_t value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:cherry.LogEntry.term)
}

// required uint32 index = 2;
inline bool LogEntry::_internal_has_index() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LogEntry::has_index() const {
  return _internal_has_index();
}
inline void LogEntry::clear_index() {
  index_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t LogEntry::_internal_index() const {
  return index_;
}
inline uint32_t LogEntry::index() const {
  // @@protoc_insertion_point(field_get:cherry.LogEntry.index)
  return _internal_index();
}
inline void LogEntry::_internal_set_index(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  index_ = value;
}
inline void LogEntry::set_index(uint32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:cherry.LogEntry.index)
}

// required bytes command = 3;
inline bool LogEntry::_internal_has_command() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LogEntry::has_command() const {
  return _internal_has_command();
}
inline void LogEntry::clear_command() {
  command_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LogEntry::command() const {
  // @@protoc_insertion_point(field_get:cherry.LogEntry.command)
  return _internal_command();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LogEntry::set_command(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 command_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cherry.LogEntry.command)
}
inline std::string* LogEntry::mutable_command() {
  std::string* _s = _internal_mutable_command();
  // @@protoc_insertion_point(field_mutable:cherry.LogEntry.command)
  return _s;
}
inline const std::string& LogEntry::_internal_command() const {
  return command_.Get();
}
inline void LogEntry::_internal_set_command(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LogEntry::_internal_mutable_command() {
  _has_bits_[0] |= 0x00000001u;
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LogEntry::release_command() {
  // @@protoc_insertion_point(field_release:cherry.LogEntry.command)
  if (!_internal_has_command()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = command_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (command_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    command_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LogEntry::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (command_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    command_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cherry.LogEntry.command)
}

// -------------------------------------------------------------------

// RequestAppendArgs

// required uint32 term = 1;
inline bool RequestAppendArgs::_internal_has_term() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RequestAppendArgs::has_term() const {
  return _internal_has_term();
}
inline void RequestAppendArgs::clear_term() {
  term_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t RequestAppendArgs::_internal_term() const {
  return term_;
}
inline uint32_t RequestAppendArgs::term() const {
  // @@protoc_insertion_point(field_get:cherry.RequestAppendArgs.term)
  return _internal_term();
}
inline void RequestAppendArgs::_internal_set_term(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  term_ = value;
}
inline void RequestAppendArgs::set_term(uint32_t value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:cherry.RequestAppendArgs.term)
}

// required int32 leader_id = 2;
inline bool RequestAppendArgs::_internal_has_leader_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RequestAppendArgs::has_leader_id() const {
  return _internal_has_leader_id();
}
inline void RequestAppendArgs::clear_leader_id() {
  leader_id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t RequestAppendArgs::_internal_leader_id() const {
  return leader_id_;
}
inline int32_t RequestAppendArgs::leader_id() const {
  // @@protoc_insertion_point(field_get:cherry.RequestAppendArgs.leader_id)
  return _internal_leader_id();
}
inline void RequestAppendArgs::_internal_set_leader_id(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  leader_id_ = value;
}
inline void RequestAppendArgs::set_leader_id(int32_t value) {
  _internal_set_leader_id(value);
  // @@protoc_insertion_point(field_set:cherry.RequestAppendArgs.leader_id)
}

// required uint32 pre_log_index = 3;
inline bool RequestAppendArgs::_internal_has_pre_log_index() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RequestAppendArgs::has_pre_log_index() const {
  return _internal_has_pre_log_index();
}
inline void RequestAppendArgs::clear_pre_log_index() {
  pre_log_index_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t RequestAppendArgs::_internal_pre_log_index() const {
  return pre_log_index_;
}
inline uint32_t RequestAppendArgs::pre_log_index() const {
  // @@protoc_insertion_point(field_get:cherry.RequestAppendArgs.pre_log_index)
  return _internal_pre_log_index();
}
inline void RequestAppendArgs::_internal_set_pre_log_index(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  pre_log_index_ = value;
}
inline void RequestAppendArgs::set_pre_log_index(uint32_t value) {
  _internal_set_pre_log_index(value);
  // @@protoc_insertion_point(field_set:cherry.RequestAppendArgs.pre_log_index)
}

// required uint32 pre_log_term = 4;
inline bool RequestAppendArgs::_internal_has_pre_log_term() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RequestAppendArgs::has_pre_log_term() const {
  return _internal_has_pre_log_term();
}
inline void RequestAppendArgs::clear_pre_log_term() {
  pre_log_term_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t RequestAppendArgs::_internal_pre_log_term() const {
  return pre_log_term_;
}
inline uint32_t RequestAppendArgs::pre_log_term() const {
  // @@protoc_insertion_point(field_get:cherry.RequestAppendArgs.pre_log_term)
  return _internal_pre_log_term();
}
inline void RequestAppendArgs::_internal_set_pre_log_term(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  pre_log_term_ = value;
}
inline void RequestAppendArgs::set_pre_log_term(uint32_t value) {
  _internal_set_pre_log_term(value);
  // @@protoc_insertion_point(field_set:cherry.RequestAppendArgs.pre_log_term)
}

// required uint32 leader_commit = 5;
inline bool RequestAppendArgs::_internal_has_leader_commit() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool RequestAppendArgs::has_leader_commit() const {
  return _internal_has_leader_commit();
}
inline void RequestAppendArgs::clear_leader_commit() {
  leader_commit_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t RequestAppendArgs::_internal_leader_commit() const {
  return leader_commit_;
}
inline uint32_t RequestAppendArgs::leader_commit() const {
  // @@protoc_insertion_point(field_get:cherry.RequestAppendArgs.leader_commit)
  return _internal_leader_commit();
}
inline void RequestAppendArgs::_internal_set_leader_commit(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  leader_commit_ = value;
}
inline void RequestAppendArgs::set_leader_commit(uint32_t value) {
  _internal_set_leader_commit(value);
  // @@protoc_insertion_point(field_set:cherry.RequestAppendArgs.leader_commit)
}

// repeated .cherry.LogEntry entries = 6;
inline int RequestAppendArgs::_internal_entries_size() const {
  return entries_.size();
}
inline int RequestAppendArgs::entries_size() const {
  return _internal_entries_size();
}
inline void RequestAppendArgs::clear_entries() {
  entries_.Clear();
}
inline ::cherry::LogEntry* RequestAppendArgs::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:cherry.RequestAppendArgs.entries)
  return entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cherry::LogEntry >*
RequestAppendArgs::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:cherry.RequestAppendArgs.entries)
  return &entries_;
}
inline const ::cherry::LogEntry& RequestAppendArgs::_internal_entries(int index) const {
  return entries_.Get(index);
}
inline const ::cherry::LogEntry& RequestAppendArgs::entries(int index) const {
  // @@protoc_insertion_point(field_get:cherry.RequestAppendArgs.entries)
  return _internal_entries(index);
}
inline ::cherry::LogEntry* RequestAppendArgs::_internal_add_entries() {
  return entries_.Add();
}
inline ::cherry::LogEntry* RequestAppendArgs::add_entries() {
  ::cherry::LogEntry* _add = _internal_add_entries();
  // @@protoc_insertion_point(field_add:cherry.RequestAppendArgs.entries)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cherry::LogEntry >&
RequestAppendArgs::entries() const {
  // @@protoc_insertion_point(field_list:cherry.RequestAppendArgs.entries)
  return entries_;
}

// -------------------------------------------------------------------

// RequestAppendReply

// required uint32 term = 1;
inline bool RequestAppendReply::_internal_has_term() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RequestAppendReply::has_term() const {
  return _internal_has_term();
}
inline void RequestAppendReply::clear_term() {
  term_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t RequestAppendReply::_internal_term() const {
  return term_;
}
inline uint32_t RequestAppendReply::term() const {
  // @@protoc_insertion_point(field_get:cherry.RequestAppendReply.term)
  return _internal_term();
}
inline void RequestAppendReply::_internal_set_term(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  term_ = value;
}
inline void RequestAppendReply::set_term(uint32_t value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:cherry.RequestAppendReply.term)
}

// required bool success = 2;
inline bool RequestAppendReply::_internal_has_success() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RequestAppendReply::has_success() const {
  return _internal_has_success();
}
inline void RequestAppendReply::clear_success() {
  success_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool RequestAppendReply::_internal_success() const {
  return success_;
}
inline bool RequestAppendReply::success() const {
  // @@protoc_insertion_point(field_get:cherry.RequestAppendReply.success)
  return _internal_success();
}
inline void RequestAppendReply::_internal_set_success(bool value) {
  _has_bits_[0] |= 0x00000002u;
  success_ = value;
}
inline void RequestAppendReply::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:cherry.RequestAppendReply.success)
}

// -------------------------------------------------------------------

// KvCommnad

// required string operation = 1;
inline bool KvCommnad::_internal_has_operation() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool KvCommnad::has_operation() const {
  return _internal_has_operation();
}
inline void KvCommnad::clear_operation() {
  operation_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& KvCommnad::operation() const {
  // @@protoc_insertion_point(field_get:cherry.KvCommnad.operation)
  return _internal_operation();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KvCommnad::set_operation(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 operation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cherry.KvCommnad.operation)
}
inline std::string* KvCommnad::mutable_operation() {
  std::string* _s = _internal_mutable_operation();
  // @@protoc_insertion_point(field_mutable:cherry.KvCommnad.operation)
  return _s;
}
inline const std::string& KvCommnad::_internal_operation() const {
  return operation_.Get();
}
inline void KvCommnad::_internal_set_operation(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  operation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* KvCommnad::_internal_mutable_operation() {
  _has_bits_[0] |= 0x00000001u;
  return operation_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* KvCommnad::release_operation() {
  // @@protoc_insertion_point(field_release:cherry.KvCommnad.operation)
  if (!_internal_has_operation()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = operation_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (operation_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    operation_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void KvCommnad::set_allocated_operation(std::string* operation) {
  if (operation != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  operation_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), operation,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (operation_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    operation_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cherry.KvCommnad.operation)
}

// required string key = 2;
inline bool KvCommnad::_internal_has_key() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool KvCommnad::has_key() const {
  return _internal_has_key();
}
inline void KvCommnad::clear_key() {
  key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& KvCommnad::key() const {
  // @@protoc_insertion_point(field_get:cherry.KvCommnad.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KvCommnad::set_key(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cherry.KvCommnad.key)
}
inline std::string* KvCommnad::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:cherry.KvCommnad.key)
  return _s;
}
inline const std::string& KvCommnad::_internal_key() const {
  return key_.Get();
}
inline void KvCommnad::_internal_set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* KvCommnad::_internal_mutable_key() {
  _has_bits_[0] |= 0x00000002u;
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* KvCommnad::release_key() {
  // @@protoc_insertion_point(field_release:cherry.KvCommnad.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void KvCommnad::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cherry.KvCommnad.key)
}

// required string value = 3;
inline bool KvCommnad::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool KvCommnad::has_value() const {
  return _internal_has_value();
}
inline void KvCommnad::clear_value() {
  value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& KvCommnad::value() const {
  // @@protoc_insertion_point(field_get:cherry.KvCommnad.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KvCommnad::set_value(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cherry.KvCommnad.value)
}
inline std::string* KvCommnad::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:cherry.KvCommnad.value)
  return _s;
}
inline const std::string& KvCommnad::_internal_value() const {
  return value_.Get();
}
inline void KvCommnad::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* KvCommnad::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000004u;
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* KvCommnad::release_value() {
  // @@protoc_insertion_point(field_release:cherry.KvCommnad.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void KvCommnad::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cherry.KvCommnad.value)
}

// required int64 cid = 4;
inline bool KvCommnad::_internal_has_cid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool KvCommnad::has_cid() const {
  return _internal_has_cid();
}
inline void KvCommnad::clear_cid() {
  cid_ = int64_t{0};
  _has_bits_[0] &= ~0x00000008u;
}
inline int64_t KvCommnad::_internal_cid() const {
  return cid_;
}
inline int64_t KvCommnad::cid() const {
  // @@protoc_insertion_point(field_get:cherry.KvCommnad.cid)
  return _internal_cid();
}
inline void KvCommnad::_internal_set_cid(int64_t value) {
  _has_bits_[0] |= 0x00000008u;
  cid_ = value;
}
inline void KvCommnad::set_cid(int64_t value) {
  _internal_set_cid(value);
  // @@protoc_insertion_point(field_set:cherry.KvCommnad.cid)
}

// required uint32 seq = 5;
inline bool KvCommnad::_internal_has_seq() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool KvCommnad::has_seq() const {
  return _internal_has_seq();
}
inline void KvCommnad::clear_seq() {
  seq_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t KvCommnad::_internal_seq() const {
  return seq_;
}
inline uint32_t KvCommnad::seq() const {
  // @@protoc_insertion_point(field_get:cherry.KvCommnad.seq)
  return _internal_seq();
}
inline void KvCommnad::_internal_set_seq(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  seq_ = value;
}
inline void KvCommnad::set_seq(uint32_t value) {
  _internal_set_seq(value);
  // @@protoc_insertion_point(field_set:cherry.KvCommnad.seq)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace cherry

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_args_2eproto
